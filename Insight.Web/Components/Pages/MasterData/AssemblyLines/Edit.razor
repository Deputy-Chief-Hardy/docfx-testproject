@page "/MasterData/AssemblyLines/Edit/{Id:int}"
@using KnorrBremse.Insight.MasterData.ApiClient
@using KnorrBremse.Insight.MasterData.API.Model;

@inject MasterDataClient MasterDataClient
@inject NavigationManager Navigation

<PageTitle>Assembly Line @Id</PageTitle>

<!-- <a href="https://www.freepik.com/icon/industry_5277441">Icon by Freepik</a> -->
<h1><img src="/media/assembly_line_color.png" /> Assembly Line @Id</h1>

@message

@if (Model == null)
{
    <Spinner></Spinner>
}
else
{
    <EditForm Model="Model" OnValidSubmit="SaveClick" FormName="AssemblyLineEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Name</label>
            <div class="col-auto">
                <InputText class="form-control" @bind-Value="Model.SapName" />
                <ValidationMessage For="(() => Model.SapName)" />
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputText class="form-control col-auto" @bind-Value="Model.Description" />
            <div class="col-auto">
                <ValidationMessage For="(() => Model.Description)" />
            </div>
        </div>

        <div class="mb-3 form-check form-switch">
            <InputCheckbox class="form-check-input" @bind-Value="Model.IsActive" id="isActive"/>
            <label class="form-label" for="isActive">Is Active</label>
        </div>

        <div class="">
            <button type="submit" class="btn btn-primary">
                Save
            </button>
            <a class="btn btn-secondary" href="MasterData/AssemblyLines">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    protected AssemblyLine? Model { get; set; }

    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model ??= await MasterDataClient.AssemblyLinesGETAsync(Id);
        }
        catch (ApiException)
        {
        }
    }

    protected async Task SaveClick()
    {
        try
        {
            await MasterDataClient.AssemblyLinesPUTAsync(Id, Model);
            //message = "Data has been updated.";
            Navigation.NavigateTo("MasterData/AssemblyLines", true); // Don't worry if your debugger shows a NavigationException here. That is how redirects are implemented in Blazor.
        }
        catch (ApiException ex)
        {
            message = "An error occured during update. " + ex.Message;
        }
    }

}


